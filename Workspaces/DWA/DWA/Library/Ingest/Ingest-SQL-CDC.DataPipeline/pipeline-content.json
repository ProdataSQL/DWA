{
  "properties": {
    "activities": [
      {
        "type": "ExecutePipeline",
        "typeProperties": {
          "pipeline": {
            "referenceName": "0b161fb6-be93-ad8e-48c7-d3f479d6132a",
            "type": "PipelineReference"
          },
          "parameters": {},
          "waitOnCompletion": true
        },
        "policy": {
          "secureInput": false
        },
        "name": "Get Env Variables",
        "dependsOn": []
      },
      {
        "type": "Script",
        "typeProperties": {
          "database": {
            "value": "@json(string(pipeline().parameters.SourceSettings)).Database",
            "type": "Expression"
          },
          "scripts": [
            {
              "text": {
                "value": "SELECT\r\n    convert(varchar,sys.fn_cdc_get_max_lsn(),1) AS max_lsn,\r\n    sys.fn_cdc_map_lsn_to_time(sys.fn_cdc_get_max_lsn()) AS max_lsn_datetime",
                "type": "Expression"
              },
              "type": "Query"
            }
          ],
          "scriptBlockExecutionTimeout": "02:00:00"
        },
        "externalReferences": {
          "connection": "@json(string(pipeline().parameters.SourceConnectionSettings)).ConnectionID"
        },
        "policy": {
          "timeout": "0.12:00:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "SQL - Get Max LSN",
        "dependsOn": [
          {
            "activity": "Get Env Variables",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "Lookup",
        "typeProperties": {
          "source": {
            "type": "DataWarehouseSource",
            "sqlReaderStoredProcedureName": "[config].[usp_cdcSqlBegin]",
            "storedProcedureParameters": {
              "ConnectionID ": {
                "type": "String",
                "value": {
                  "value": "@json(string(pipeline().parameters.SourceConnectionSettings)).ConnectionID",
                  "type": "Expression"
                }
              },
              "Database": {
                "type": "String",
                "value": {
                  "value": "@json(string(pipeline().parameters.SourceSettings)).Database",
                  "type": "Expression"
                }
              },
              "target_lsn": {
                "type": "String",
                "value": {
                  "value": "@activity('SQL - Get max LSN').output.resultsets[0].rows[0].max_lsn",
                  "type": "Expression"
                }
              },
              "target_datetime": {
                "type": "Datetime",
                "value": {
                  "value": "@activity('SQL - Get max LSN').output.resultsets[0].rows[0].max_lsn_datetime",
                  "type": "Expression"
                }
              },
              "Table": {
                "type": "String",
                "value": {
                  "value": "@if(\n    contains(string(pipeline().parameters.SourceSettings), '\"Table\"'),\n    json(string(pipeline().parameters.SourceSettings)).Table,\n    null\n)",
                  "type": "Expression"
                }
              }
            },
            "partitionOption": "None",
            "queryTimeout": "02:00:00"
          },
          "datasetSettings": {
            "type": "DataWarehouseTable",
            "typeProperties": {
              "schema": "dbo",
              "table": "usp_cdcBegin"
            },
            "schema": [],
            "linkedService": {
              "name": "52b14798_0b9c_4626_ae6a_632f181ae204",
              "properties": {
                "type": "DataWarehouse",
                "typeProperties": {
                  "artifactId": "@activity('Get Env Variables').output.pipelineReturnValue.MetaDatabaseName",
                  "endpoint": "@activity('Get Env Variables').output.pipelineReturnValue.MetaServerName",
                  "workspaceId": "@activity('Get Env Variables').output.pipelineReturnValue.WorkspaceID"
                },
                "annotations": []
              }
            },
            "annotations": []
          },
          "firstRowOnly": false
        },
        "policy": {
          "timeout": "0.00:30:00",
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false
        },
        "name": "usp_cdcSqlBegin",
        "description": "Start CDC and Return LSN Numbers for tables in scope",
        "dependsOn": [
          {
            "activity": "SQL - Get Max LSN",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      },
      {
        "type": "ForEach",
        "typeProperties": {
          "batchCount": 8,
          "items": {
            "value": "@activity('usp_cdcSqlBegin').output.value",
            "type": "Expression"
          },
          "activities": [
            {
              "type": "Copy",
              "typeProperties": {
                "source": {
                  "type": "SqlServerSource",
                  "sqlReaderQuery": {
                    "value": "DECLARE @Table         varchar(255) = '@{item().Table}'\nDECLARE @capture_inst  sysname\nDECLARE @from_lsn_str varchar(22) = '@{item().from_lsn}'\nDECLARE @to_lsn_str varchar(22) = '@{item().to_lsn}'\nDECLARE @to_lsn        binary(10) \nDECLARE @from_lsn      binary(10) \nDECLARE @is_snapshot   bit\n\nIF len(@to_lsn_str) = 0 or @to_lsn_str is null \n\tSELECT @to_lsn = sys.fn_cdc_get_max_lsn(), @to_lsn_str = CONVERT(varchar, sys.fn_cdc_get_max_lsn(),1)\nELSE\n\tSET @to_lsn  = convert(binary(10),@to_lsn_str ,1)\n\nSET @from_lsn =convert(binary(10),nullif(@from_lsn_str,'') ,1)\nSELECT @capture_inst = capture_instance\nFROM cdc.change_tables\nWHERE source_object_id = OBJECT_ID(@Table)\n\nIF @capture_inst IS NULL\nBEGIN\n\tRAISERROR('CDC is not enabled for table %s', 16, 1, @Table)\n\tRETURN\nEND\n\n-- Determine if snapshot is required\nIF @from_lsn IS NULL\n\tOR NOT EXISTS (\n\t\tSELECT 1\n\t\tFROM cdc.lsn_time_mapping\n\t\tWHERE start_lsn = @from_lsn\n\t)\n\tSET @is_snapshot = 1\nELSE\n\tSET @is_snapshot = 0\n\n-- Snapshot query\nIF @is_snapshot = 1\nBEGIN\n\tDECLARE @sql nvarchar(max) = '\n\tSELECT \n\t\tt.*\n\t,\t0 AS __rowMarker__\n\tFROM ' + @Table + ' t'\n\n\tEXEC sp_executesql @sql, N'@to_lsn binary(10)', @to_lsn\nEND\n-- CDC incremental query\nELSE\nBEGIN\n\tDECLARE @cdc_sql nvarchar(max) = '\n\tSELECT \n\t\tcdc.*\n\t,\tCASE cdc.__$operation\n\t\t\tWHEN 1 THEN 2\n\t\t\tWHEN 2 THEN 4\n\t\t\tWHEN 4 THEN 4\n\t\t\tELSE -1\n\t\tEND AS __rowMarker__\n\tFROM cdc.fn_cdc_get_net_changes_' + @capture_inst + '(' + @from_lsn_str + ',' +  @to_lsn_str + ', ''all'') AS cdc\n\tWHERE cdc.__$operation IN (1, 2, 4)'\n\n\tprint @cdc_sql\n\tEXEC sp_executesql @cdc_sql,\n\t\tN'@from_lsn binary(10), @to_lsn binary(10)',\n\t\t@from_lsn=@from_lsn, @to_lsn=@to_lsn\nEND\n\n\n",
                    "type": "Expression"
                  },
                  "partitionOption": "None",
                  "queryTimeout": "02:00:00",
                  "additionalColumns": [
                    {
                      "name": "LineageKey",
                      "value": {
                        "value": "@pipeline().parameters.LineageKey",
                        "type": "Expression"
                      }
                    }
                  ],
                  "datasetSettings": {
                    "type": "SqlServerTable",
                    "typeProperties": {
                      "database": {
                        "value": "@json(string(pipeline().parameters.SourceSettings)).Database",
                        "type": "Expression"
                      }
                    },
                    "schema": [],
                    "externalReferences": {
                      "connection": "@json(string(pipeline().parameters.SourceConnectionSettings)).ConnectionID"
                    },
                    "annotations": []
                  }
                },
                "sink": {
                  "type": "ParquetSink",
                  "formatSettings": {
                    "type": "ParquetWriteSettings",
                    "enableVertiParquet": true
                  },
                  "storeSettings": {
                    "type": "LakehouseWriteSettings"
                  },
                  "datasetSettings": {
                    "type": "Parquet",
                    "typeProperties": {
                      "location": {
                        "type": "LakehouseLocation",
                        "folderPath": {
                          "value": "LandingZone/@{json(string(pipeline().parameters.TargetSettings)).Schema}.schema/@{split(item().Table,'.')[1]}",
                          "type": "Expression"
                        },
                        "fileName": {
                          "value": "@{split(item().Table,'.')[1]}_@{formatDateTime(utcNow(), 'yyyyMMddHHmmss')}.parquet",
                          "type": "Expression"
                        }
                      },
                      "compressionCodec": "snappy"
                    },
                    "schema": [],
                    "linkedService": {
                      "name": "a440ad42_79e5_442a_beb0_7f2cc236d699",
                      "properties": {
                        "type": "Lakehouse",
                        "typeProperties": {
                          "artifactId": "@json(string(pipeline().parameters.TargetConnectionSettings)).LakehouseID",
                          "workspaceId": "@json(string(pipeline().parameters.TargetConnectionSettings)).WorkspaceID",
                          "rootFolder": "Files"
                        },
                        "annotations": []
                      }
                    },
                    "annotations": []
                  }
                },
                "translator": {
                  "type": "TabularTranslator",
                  "typeConversion": true,
                  "typeConversionSettings": {
                    "allowDataTruncation": true,
                    "treatBooleanAsNumber": false
                  }
                },
                "enableStaging": false
              },
              "policy": {
                "timeout": "0.1:00:00",
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false
              },
              "name": "Copy SQL to Parquet",
              "dependsOn": []
            }
          ]
        },
        "name": "ForEach-Table",
        "description": "Loop over CDC Tables in Source",
        "dependsOn": [
          {
            "activity": "usp_cdcSqlBegin",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ]
      }
    ],
    "parameters": {
      "SourceSettings": {
        "type": "string",
        "defaultValue": {
          "Database": "AdventureWorksLT"
        }
      },
      "TargetSettings": {
        "type": "string",
        "defaultValue": {}
      },
      "SourceConnectionSettings": {
        "type": "string",
        "defaultValue": {
          "ConnectionID": "d5909f9f-7ce7-4aca-8da2-ba8bfb057610"
        }
      },
      "TargetConnectionSettings": {
        "type": "string",
        "defaultValue": {
          "LakehouseName": "LH",
          "LakehouseID": "667bdf6d-f6d5-49f0-a956-26a4f38348e5",
          "WorkspaceID": "e071acc0-d1b7-472e-b042-14fd2f3bdfc7"
        }
      },
      "ActivitySettings": {
        "type": "string"
      },
      "LineageKey": {
        "type": "string"
      }
    },
    "variables": {
      "from_lsn": {
        "type": "String",
        "defaultValue": "0x0005DEC8001CB2050008"
      },
      "to_lsn": {
        "type": "String",
        "defaultValue": "0x0005E0B70000016E0001"
      }
    }
  }
}